{"version":3,"sources":["Components/menu/menu.jsx","Components/search/search-bar.jsx","Components/cards-list/card.js","Components/cards-list/card-list.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","this","state","active","onClick","setState","SearchBar","console","log","input","type","placeholder","value","onChange","result","search","target","onKeyDown","event","key","onSearchHandler","Card","alt","src","book","volumeInfo","imageLinks","thumbnail","title","CardList","booktub","map","id","App","bind","axios","get","then","books","data","items","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4WAuBeA,MApBf,SAAaC,GACX,OACE,6BACE,yBAAKC,UAAU,YACb,yBACEA,UAAWD,EAAME,KAAKC,MAAMC,OAAS,gBAAkB,WACvDC,QAAS,kBACPL,EAAME,KAAKI,SAAS,CAAEF,QAASJ,EAAME,KAAKC,MAAMC,WAGlD,+BACA,+BACA,iCAIJ,yBAAKH,UAAWD,EAAME,KAAKC,MAAMC,OAAS,UAAY,W,MCY7CG,MA7Bf,SAAmBP,GACjB,OACE,yBAAKC,UAAU,aACZO,QAAQC,IAAI,MACZD,QAAQC,IAAIT,EAAMU,MAAMP,OACzB,2BACEQ,KAAK,OACLC,YAAY,YACZC,MAAOb,EAAMU,MACbI,SAAU,SAACC,GAAD,OACRf,EAAME,KAAKI,SAAS,CAAEU,OAAQD,EAAOE,OAAOJ,SAE9CK,UAAW,SAACC,GACQ,UAAdA,EAAMC,KACRpB,EAAME,KAAKmB,qBAIjB,4BACEpB,UAAU,oBACVU,KAAK,SACLN,QAASL,EAAME,KAAKmB,gBACpBT,YAAY,WAEbJ,QAAQC,IAAIT,EAAME,KAAKC,MAAMC,OAAS,W,MCb9BkB,MAVf,SAActB,GACZ,OACE,yBAAKC,UAAU,kBACb,yBAAKsB,IAAI,OAAOC,IAAKxB,EAAMyB,KAAKC,WAAWC,WAAWC,YAEtD,4BAAK5B,EAAMyB,KAAKC,WAAWG,S,MCSlBC,MAbf,SAAkB9B,GAChB,OAAQ,yBAAKC,UAAU,cACrB,yBAAKA,UAAU,aACZD,EAAM+B,QAAQC,KAAI,SAACP,GAAD,OACjB,kBAAC,EAAD,CAAML,IAAKK,EAAKQ,GAAIR,KAAMA,U,gBCqDnBS,E,kDArDb,aAAe,IAAD,8BACZ,gBACKb,gBAAkB,EAAKA,gBAAgBc,KAArB,gBACvB,EAAKhC,MAAQ,CACX4B,QAAS,GACTf,OAAQ,gBALE,E,gEAYO,IAAD,OAClBoB,IACGC,IADH,wDACwDnC,KAAKC,MAAMa,SAEhEsB,MAAK,SAACC,GAGL,EAAKjC,SAAS,CAAEyB,QAASQ,EAAMC,KAAKC,QACpCjC,QAAQC,IAAI,EAAKN,MAAM4B,YAExBW,OAAM,SAACC,GAAD,OAASnC,QAAQC,IAAIkC,Q,wCAEb,IAAD,OAChBP,IACGC,IADH,wDACwDnC,KAAKC,MAAMa,SAChEsB,MAAK,SAACC,GAAD,OAAW,EAAKjC,SAAS,CAAEyB,QAASQ,EAAMC,KAAKC,WACpDC,OAAM,SAACC,GAAD,OAASnC,QAAQC,IAAIkC,Q,+BAI9B,OACE,yBAAK1C,UAAU,OAYb,kBAAC,EAAD,CAAKC,KAAMA,OACX,kBAAC,EAAD,CAAWQ,MAAOR,KAAKC,MAAMa,OAAQd,KAAMA,OAC3C,kBAAC,EAAD,CAAU6B,QAAS7B,KAAKC,MAAM4B,e,GAhDpBa,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.bc28907f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./menu.css\";\n\nfunction Nav(props) {\n  return (\n    <div>\n      <div className=\"position\">\n        <div\n          className={props.this.state.active ? \"nav-icon open\" : \"nav-icon\"}\n          onClick={() =>\n            props.this.setState({ active: !props.this.state.active })\n          }\n        >\n          <span></span>\n          <span></span>\n          <span></span>\n        </div>\n      </div>\n\n      <div className={props.this.state.active ? \"sidebar\" : \"none\"}></div>\n    </div>\n  );\n}\nexport default Nav;\n","import React from \"react\";\nimport \"./search-bar.css\";\nfunction SearchBar(props) {\n  return (\n    <div className=\"container\">\n      {console.log(\"hi\")}\n      {console.log(props.input.state)}\n      <input\n        type=\"text\"\n        placeholder=\"search...\"\n        value={props.input}\n        onChange={(result) =>\n          props.this.setState({ search: result.target.value })\n        }\n        onKeyDown={(event) => {\n          if (event.key === \"Enter\") {\n            props.this.onSearchHandler();\n          }\n        }}\n      ></input>\n      <button\n        className=\"search pulse-grow\"\n        type=\"submit\"\n        onClick={props.this.onSearchHandler}\n        placeholder=\"Search\"\n      />\n      {console.log(props.this.state.active + \" abcd\")}\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport \"./card.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card-container\">\n      <img alt=\"book\" src={props.book.volumeInfo.imageLinks.thumbnail}></img>\n      {/* {console.dir(props.book.volumeInfo.imageLinks.thumbnail)} */}\n      <h1>{props.book.volumeInfo.title}</h1>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./card.js\";\nimport \"./card-list.css\";\n\nfunction CardList(props) {\n  return (<div className='background'>\n    <div className=\"card-list\">\n      {props.booktub.map((book) => (\n        <Card key={book.id} book={book}></Card>\n      ))}\n      {/* <input onChange={this.setState{url:eventtarget.value}}>search</input> */}\n    </div>\n  </div>\n\n  );\n}\n\nexport default CardList;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./Components/menu/menu\";\nimport SearchBar from \"./Components/search/search-bar\";\nimport CardList from \"./Components/cards-list/card-list\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.onSearchHandler = this.onSearchHandler.bind(this);\n    this.state = {\n      booktub: [],\n      search: \"Harry Potter\",\n      // url: `https://www.googleapis.com/books/v1/volumes?q=`,\n      // hi: this.state.search\n      // search+ terms\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(`https://www.googleapis.com/books/v1/volumes?q=${this.state.search}`)\n      // .then((response) => console.log(response))\n      .then((books) => {\n        // console.log(\"start\");\n        // console.log(books.data);\n        this.setState({ booktub: books.data.items });\n        console.log(this.state.booktub);\n      })\n      .catch((err) => console.log(err));\n  }\n  onSearchHandler() {\n    axios\n      .get(`https://www.googleapis.com/books/v1/volumes?q=${this.state.search}`)\n      .then((books) => this.setState({ booktub: books.data.items }))\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <input\n          type=\"text\"\n          placeholder=\"search\"\n          value={this.state.search}\n          onChange={(result) => this.setState({ search: result.target.value })}\n        ></input> */}\n        {/* <button\n          type=\"submit\"\n          onClick={this.onSearchHandler}\n          placeholder=\"Search\"\n        /> */}\n        <Nav this={this}></Nav>\n        <SearchBar input={this.state.search} this={this}></SearchBar>\n        <CardList booktub={this.state.booktub}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}